import telebot
from telebot import types
from collections import defaultdict as dd
import enum
import os
from dotenv import load_dotenv

class ResultCodes(enum.Enum):
    '''
    Enum –∫–ª–∞—Å—Å –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è
    –∫–æ–¥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    '''

    ok = 0
    word_already_exist = 1

class Dictionary:
    '''
    –ö–ª–∞—Å—Å —Å–ª–æ–≤–∞—Ä—è, —Ö—Ä–∞–Ω—è—â–µ–≥–æ —Å–ª–æ–≤–∞ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã

    self.name: str ‚Äî –∏–º—è —Å–ª–æ–≤–∞—Ä—è
    self.mapping: defaultdict ‚Äî —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–∞ "—Å–ª–æ–≤–æ: –ø–µ—Ä–µ–≤–æ–¥"
    '''

    def __init__(self, name: str):
        self.name = name
        self.mapping = dd(str)


    def __str__(self) -> str:
        res = f'`{self.name}`\n\n'
        if len(self.mapping.keys()) > 0:
            sorted_keys = sorted(self.mapping.keys())
            for k in sorted_keys:
                v = self.mapping[k]
                res += f'\t`{k}` ‚Äî‚Äî '
                res += str(v[:15])
                res += ('...' if (len(v) > 15) else '')
                res += '\n'
        else:
            res += '\t–≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç...'
        return res + '\n'


    def get_name(self) -> str:
        if not hasattr(self, 'name'):
            raise ValueError('Dictionary do not have a name')
        return self.name


    def change_name(self, new_name: str) -> int:
        self.name = new_name
        return ResultCodes.ok.value


    def add_word(self, word: str, translation: str, forced=False) -> int:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
        if not forced and word in self.mapping.keys():
            return ResultCodes.word_already_exist.value
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        self.mapping[word] = translation


load_dotenv()

# '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π': Dictionary('–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', ...)
dictionaries = dd(str)
max_dict_name_len = 20
first = True


#bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'))
bot = telebot.TeleBot('6147352947:AAGw2dPTsNfXV501DMhsYXzrXlbkBucEU8o')

def update_dicts_markup():
    global dicts_markup

    dicts_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for d in dictionaries.values():
        dicts_markup.add(types.KeyboardButton(d.get_name()))

flags_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
btn_blank = types.KeyboardButton("‚ùå")
btn_rus = types.KeyboardButton("üá∑üá∫")
btn_eng = types.KeyboardButton("üá¨üáß")
btn_ger = types.KeyboardButton("üá©üá™")
btn_kor = types.KeyboardButton("üá∞üá∑")
btn_jap = types.KeyboardButton("üáØüáµ")
btn_chi = types.KeyboardButton("üá®üá≥")
btn_ita = types.KeyboardButton("üáÆüáπ")
btn_fra = types.KeyboardButton("üá´üá∑")
btn_spa = types.KeyboardButton("üá™üá∏")
flags_markup.add(btn_blank,
            btn_rus,
            btn_eng,
            btn_ger,
            btn_kor,
            btn_jap,
            btn_chi,
            btn_ita,
            btn_fra,
            btn_spa)

menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
btn_create_dict = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å")
btn_create_word = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
btn_view_dicts = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π")
btn_view_dict = types.KeyboardButton("–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å")
btn_delete_dict = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å")
btn_delete_word = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
menu_markup.add(btn_create_dict,
            btn_create_word,
            btn_view_dicts,
            btn_view_dict,
            btn_delete_dict,
            btn_delete_word)


# –ù–ê–ß–ê–õ–û
@bot.message_handler(commands=['start'])
def start_message(message):
    global first
    
    if first:
        sent = bot.send_message(message.from_user.id,
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!, *{message.from_user.username}*!\n\n' +
        '–Ø ‚Äî –±–æ—Ç-—Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤.\n\n' + 
        '–Ø –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–∂—É –∫–∞–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—ã—á–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ, —Ç–∞–∫ –∏ ' + 
        '–¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ª–µ–∫—Å–∏–∫–æ–Ω–∞. –ü—Ä–∏—Å—Ç—É–ø–∏–º?\n\n' + 
        '‚Äî'*30 + '\n\n' + '`[>] –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–º–æ—â—å—é\n' + ' ' * 4 + '–∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å"`',
        parse_mode='Markdown',
        reply_markup=menu_markup
        )
        first = False
    else:
        sent = bot.send_message(message.from_user.id,
        f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ',
        parse_mode='Markdown',
        reply_markup=menu_markup
        )
        first = False

    bot.register_next_step_handler(sent, manager)


def manager(message):
    operation = message.text
    if operation == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å":
        add_dictionary(message)
    elif operation == "–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π":
        list_of_dictionaries(message)
    elif operation == "–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å":
        look_to_dictionary(message)
    elif operation == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ':
        add_word(message)
    elif operation == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å':
        delete_dict(message)
    elif operation == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ':
        delete_word(message)
    else:
        bot.send_message(message.from_user.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')
        start_message(message)




# –£–î–ê–õ–ò–¢–¨ –°–õ–û–í–û
@bot.message_handler(commands=['delete_word'])
def delete_word(message):
    if len(dictionaries.keys()) == 0:
        bot.send_message(message.from_user.id,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å"',
        parse_mode='Markdown')
        start_message(message)
        return
    
    update_dicts_markup()
    
    sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞',
    reply_markup=dicts_markup)
    bot.register_next_step_handler(sent, have_dict_name_to_delete_word)


def have_dict_name_to_delete_word(message):
    dict_name = message.text
    if dict_name not in dictionaries.keys():
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        delete_word(message)

    else:
        words = sorted(dictionaries[dict_name].mapping.keys())
        words_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        for w in words:
            words_markup.add(types.KeyboardButton(w))
        
        sent = bot.send_message(message.from_user.id, '–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?',
        reply_markup=words_markup)
        bot.register_next_step_handler(sent, have_dict_name_and_word_to_delete, message, dict_name)


def have_dict_name_and_word_to_delete(message, old_message, dict_name):
    word = message.text
    if word not in dictionaries[dict_name].mapping.keys():
        bot.send_message(message.from_user.id, "–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        have_dict_name_to_delete_word(old_message)

    else:
        dictionaries[dict_name].mapping.pop(word)
        bot.send_message(message.from_user.id, f"–°–ª–æ–≤–æ {word} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        start_message(message)


# –£–î–ê–õ–ò–¢–¨ –°–õ–û–í–ê–†–¨
@bot.message_handler(commands=['delete_dict'])
def delete_dict(message):
    if len(dictionaries.keys()) == 0:
        bot.send_message(message.from_user.id,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å"',
        parse_mode='Markdown')
        start_message(message)
        return
    
    update_dicts_markup()
    
    sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞',
    reply_markup=dicts_markup)
    bot.register_next_step_handler(sent, have_dict_name_to_delete_dict) 


def have_dict_name_to_delete_dict(message):
    dict_name = message.text
    if dict_name not in dictionaries.keys():
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        delete_dict(message)

    else:
        dictionaries.pop(dict_name)
        bot.send_message(message.from_user.id, f'–°–ª–æ–≤–∞—Ä—å {dict_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
        start_message(message)


# –î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–û
@bot.message_handler(commands=['add_word'])
def add_word(message):
    if len(dictionaries.keys()) == 0:
        bot.send_message(message.from_user.id,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å"',
        parse_mode='Markdown')
        start_message(message)
        return
    
    update_dicts_markup()
    
    sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞',
    reply_markup=dicts_markup)

    bot.register_next_step_handler(sent, have_dict_name_to_add_word) 


def have_dict_name_to_add_word(message):
    dict_name = message.text
    if dict_name not in dictionaries.keys():
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        add_word(message)

    else:
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ')
        bot.register_next_step_handler(sent, have_word_to_add, dict_name)


def have_word_to_add(message, dict_name, forced=False):
    word = message.text

    if not forced and word in dictionaries[dict_name].mapping.keys():

        yes_no_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_yes = types.KeyboardButton("–î–∞")
        btn_no  = types.KeyboardButton("–ù–µ—Ç")
        yes_no_markup.add(btn_yes, btn_no)
        sent = bot.send_message(message.from_user.id, f'–°–ª–æ–≤–æ {word} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ! –•–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å?',
        reply_markup=yes_no_markup)
        bot.register_next_step_handler(sent, word_overwrite, message, dict_name)

    else:
        sent = bot.send_message(message.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ {word}')
        bot.register_next_step_handler(sent, have_word_and_translation_to_add, dict_name, word)


def word_overwrite(message, old_message, dict_name):
    answer = message.text
    if answer == '–î–∞':
        have_word_to_add(old_message, dict_name, forced=True)
    else:
        start_message(message)


def have_word_and_translation_to_add(message, dict_name, word):
    translation = message.text
    dictionaries[dict_name].mapping[word] = translation
    bot.send_message(message.from_user.id, f'–°–ª–æ–≤–æ {word} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å {dict_name}')
    start_message(message)


# –ó–ê–ì–õ–Ø–ù–£–¢–¨ –í –°–õ–û–í–ê–†–¨
@bot.message_handler(commands=['look_to_dictionary'])
def look_to_dictionary(message):
    global dicts_markup
    
    if len(dictionaries.keys()) == 0:
        bot.send_message(message.from_user.id,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å"',
        parse_mode='Markdown')
        start_message(message)

    update_dicts_markup()
    
    sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞',
    reply_markup=dicts_markup)

    bot.register_next_step_handler(sent, have_dict_name_to_watch) 
    

def have_dict_name_to_watch(message):
    dict_name = message.text
    if dict_name not in dictionaries.keys():
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        look_to_dictionary(message)
    else:
        bot.send_message(message.from_user.id, f'{dictionaries[dict_name]}',
        parse_mode='Markdown')
        start_message(message)





# –°–ü–ò–°–û–ö –°–õ–û–í–ê–†–ï–ô
@bot.message_handler(commands=['list_of_dictionaries'])
def list_of_dictionaries(message):
    bot.reply_to(message, 
    (f'*–í–∞—à–∏ —Å–ª–æ–≤–∞—Ä–∏*:\n\n' + 
    parse_to_human_readable(dictionaries)),
    parse_mode='Markdown')
    
    start_message(message)


def parse_to_human_readable(dicts):
    if len(dicts.keys()) == 0:
        return '—Ç—É—Ç –ø—É—Å—Ç–æ...'
    
    res = ''
    for k, v in dicts.items():
        res += (str(v) + '\n')
    return res   





# –î–û–ë–ê–í–ò–¢–¨ –°–õ–û–í–ê–†–¨
@bot.message_handler(commands=['add_dictionary'])
def add_dictionary(message):
    
    sent = bot.send_message(message.from_user.id, '–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å!\n\n' + 
    '–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è\n\n' +
    f'`–í–ê–ñ–ù–û! –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç {max_dict_name_len} —Å–∏–º–≤–æ–ª–æ–≤`')
    bot.register_next_step_handler(sent, got_name)   


def got_name(message):
    name = message.text[:20]
    sent = message
    try:
        sent = bot.send_message(message.from_user.id, 
        f'–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞–∑–æ–≤—ë–º —Å–ª–æ–≤–∞—Ä—å `{name}`!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —ç–º–æ–¥–∑–∏, ' +
        '–∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å —è—Ä–ª—ã–∫–æ–º —Å–ª–æ–≤–∞—Ä—è. –¢—ã '+
        '–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å ‚ùå, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏', 
        parse_mode='Markdown',
        reply_markup=flags_markup)
        bot.register_next_step_handler(sent, got_name_and_emoji, name)
    except:
        sent = bot.send_message(message.from_user.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(sent, got_name)


def got_name_and_emoji(message, name):
    global dictionaries
    
    emoji = message.text
    new_name = (name + ' ' + emoji) if (emoji != "‚ùå") else name
    dictionaries[new_name] = Dictionary(new_name)
    
    sent = bot.send_message(message.from_user.id, 
    f'–ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è `{new_name}`!')
    
    start_message(message)


bot.polling(none_stop=True, interval=0)